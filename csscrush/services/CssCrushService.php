<?php 
namespace Craft;

require_once craft()->path->getPluginsPath() . 'csscrush/libraries/css-crush/CssCrush.php';

/**
 * CSS Crush by Mark Croxton
 *
 * @author     	Mark Croxton <http://hallmark-design.co.uk>
 * @package    	Css Crush
 * @since		Craft 2.5
 * @copyright 	Copyright (c) 2015, Mark Croxton
 * @license 	http://opensource.org/licenses/mit-license.php MIT License
 * @link       	http://github.com/croxton/CSS-Crush-Craft
 */

class CssCrushService extends BaseApplicationComponent 
{

	// --------------------------------------------------------------------
	// PROPERTIES
	// --------------------------------------------------------------------

	/**
	 * The CSS file.
	 *
	 * @var        string
	 * @access     public
	 */
	public $filename = '';

	/* A raw string of CSS to compile
	 *
	 * @var        string
	 * @access     public  
	 */
	public $css = '';

	/**
	 * An array of html sttributes.
	 *
	 * @var        array
	 * @access     public
	 */
	public $attributes = array();

	/**
	 * Enable or disable minification of the compiled CSS file.
	 *
	 * @var        boolean
	 * @access     public
	 */
	public $minify = TRUE;

	/**
	 * Set the formatting mode for un-minified output. 
	 * Only applies when minify option is set to false.
	 *
	 * @var        string 	block | single-line | padded
	 * @access     public  
	 */
	public $formatter = '';

	/**
	 * Set the output style of newlines.
	 *
	 * @var        string 	use-platform | windows/win | unix
	 * @access     public  
	 */
	public $newlines = '';

	/* Prepend a boilerplate to the output file.
	 *
	 * @var        mixed 	true | false | filepath
	 * @access     public  
	 */
	public $boilerplate = '';

	/* Append a timestamped querystring to output filename
	 *
	 * @var        boolean
	 * @access     public  
	 */
	public $versioning = TRUE;

	/**
	 * An associative array of variables to pass to the CSS file at runtime.
	 *
	 * @var        array	
	 * @access     public
	 */
	public $vars = array();

	/**
	 * Turn caching on or off.
	 *
	 * @var        boolean	
	 * @access     public
	 */
	public $cache = TRUE;

	/* Specify an output directory for compiled files. 
	 * Defaults to the same directory as the host file.
	 *
	 * @var        string
	 * @access     public  
	 */
	public $output_dir = '';

	/* Specify an output filename (suffix is added).
	 *
	 * @var        string
	 * @access     public  
	 */
	public $output_file = '';

	/* Directory for SVG and image files generated by plugins 
	 * (defaults to the main file output directory).
	 *
	 * @var        string
	 * @access     public  
	 */
	public $asset_dir = '';

	/* Save compile stats and variables to a file in json format.
	 *
	 * @var        string
	 * @access     public  
	 */
	public $stat_dump = FALSE;

	/* Filter aliases to a specific vendor prefix.
	 *
	 * @var        mixed 	"all" | "moz", "webkit", ... | Array
	 * @access     public  
	 */
	public $vendor_target = 'all';

	/* Rewrite relative urls (and data-uris) inside inlined imported files.
	 *
	 * @var        mixed 	true | false | "absolute"
	 * @access     public  
	 */
	public $rewrite_import_urls = TRUE;

	/* An array of plugin names to enable.
	 *
	 * @var        array
	 * @access     public  
	 */
	public $plugins = array();

	/* Output a source map (compliant with the Source Map v3 proposal).
	 *
	 * @var        boolean
	 * @access     public  
	 */
	public $source_map = FALSE;

	/* Context for importing resources from relative urls 
	 * (Only applies to `csscrush_string()`).
	 *
	 * @var        string
	 * @access     public  
	 */
	public $context = '';

	/* Specify an alternative server document root for situations where 
	 * the CSS is being served behind an alias or url rewritten path.
	 *
	 * @var        string
	 * @access     public  
	 */
	public $doc_root = '';

	/* An associative array of plugin and environment settings. 
	 * Used primarily for plugin configuration.
	 *
	 * @var        array
	 * @access     public  
	 */
	public $settings = array();


	/** 
	 * Constructor
	 *
	 * @access public
	 * @return void
	 */
	public function __construct() 
	{
		// output directory
		$this->output_dir = '';
		if (isset(craft()->config->get('environmentVariables')['crushOutputDir']))
		{
			$this->output_dir = craft()->config->get('environmentVariables')['crushOutputDir'];
		}
	}

	// --------------------------------------------------------------------
	// TAGS
	// --------------------------------------------------------------------

	/** 
	 * Process CSS file and return the compiled file URL
	 *
	 * @access public
	 * @return string
	 */
	public function file()
	{
		return csscrush_file(
			$this->filename, 
			$this->getParams(FALSE, array('filename'))
		);
	}

	/** 
	 * Process CSS file and return an HTML link tag with populated href
	 *
	 * @access public
	 * @return string
	 */
	public function tag()
	{
		return csscrush_tag(
			$this->filename, 
			$this->getParams(FALSE, array('filename', 'attributes')),
			$this->attributes
		);
	}

	/** 
	 * Process CSS file and return CSS as text wrapped in html style tags
	 *
	 * @access public
	 * @return string
	 */
	public function inline()
	{
		return csscrush_inline(
			$this->filename, 
			$this->getParams(FALSE, array('filename', 'attributes')),
			$this->attributes
		);
	}

	/** 
	 * Compile a raw string of CSS string and return it
	 *
	 * @access public
	 * @return string
	 */
	public function string()
	{
		return csscrush_string(
			$this->css, 
			$this->getParams(FALSE, array('css'))
		);
	}


	// --------------------------------------------------------------------
	// UTILITY
	// --------------------------------------------------------------------

	/** 
	 * Set publically accessible properties of this object to specified parameter values
	 *
	 * @access protected
	 * @param  array 	An array of parameters
	 * @param  mixed 	An indexed array of specific parameters to set, or FALSE
	 * @return void
	 */
	public function setParams($params=array(), $limit = FALSE)
	{
		$public_vars = get_class_vars(__CLASS__);

		// restrict to specified keys
		if ($limit !== FALSE)
		{
			$public_vars = array_intersect_key($public_vars, array_flip($limit));
		}

		
		// prep parameters
		foreach ($params as $key => $var)
		{
			if ( array_key_exists($key, $public_vars) )
			{
				// the final parameter value
				$value = '';

				if (is_string($var))
				{
					// booleans
					if ( preg_match('/^[1|on|yes|y|0|off|no|n]/i', $var))
					{
						$value = (bool) preg_match('/1|on|yes|y/i', $var);
					}

					// stringified arrays
					elseif ( preg_match('/\||=/', $var))
					{
						// indexed array
						$value = explode('|', $var);

						// remove whitepace from array values
						$value = array_filter(array_map('trim', $value));

						// associative arrays
						if ( preg_match('/=/', $var))
						{
							$param = array();

							foreach ($value as $v)
							{
								$nested = explode('=', $v);
								if (isset($nested[1]))
								{
									$param[trim($nested[0])] = trim($nested[1]);
								}
							}
							$value = $param;
						}
					}

					// integers
					elseif( preg_match('/^\d+/', $var))
					{
						$value = (int) $var;
					}

					// default
					else
					{
						$value = $var;
					}
				}

				// default
				else
				{
					$value = $var;
				}

				$this->$key = $value;
			}
		}

	}

	/** 
	 * Get publicly accessible properties
	 *
	 * @access protected
	 * @param  mixed 	An indexed array/string of specific parameters to get, or FALSE
	 * @param  mixed 	An indexed array/string of specific parameters to remove, or FALSE
	 * @return array
	 */
	protected function getParams($limit = FALSE, $remove = FALSE) 
	{
		$public_vars = get_object_vars($this);

		// limit to specified keys
		if ( $limit !== FALSE )
		{
			if ( is_string($limit))
			{
				$limit = array($limit);
			}
			if ( is_array($limit))
			{
				$public_vars = array_intersect_key($public_vars, array_flip($limit));
			}
		}

		// remove specified keys
		if ( $remove !== FALSE )
		{
			if ( is_string($remove))
			{
				$remove = array($remove);
			}
			if ( is_array($remove))
			{
				foreach( $remove as $key)
				{
					if (isset($public_vars[$key]))
					{
						unset($public_vars[$key]);
					}
				}
			}
		}

		// remove empty string/array values
		foreach ($public_vars as $key => $var)
		{
			if ( is_string($var) || is_array($var))
			{
				if (empty($var))
				{
					unset($public_vars[$key]);
				}
			}
		}
		return $public_vars;
    }

    /**
	 * Wrapper for how we must return a twig option rather than raw HTML
	 *
	 * @param string
	 * @return Twig_Markup
	 */
	public function makeTwigMarkupFromHtml($html)
	{
		// Prevent having to use the |raw filter when calling variable in template
		// http://pastie.org/6412894#1
		$charset = craft()->templates->getTwig()->getCharset();
		return new \Twig_Markup($html, $charset);
	}
}
